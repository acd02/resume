---
export interface Props {
  frontmatter?: {
    title: string
  }
  title: string
  headings: {
    depth: number
    slug: string
    text: string
  }[]
}

const { headings } = Astro.props
const { title } = Astro.props.frontmatter || {}

const filteredHeadings = headings.filter(({ depth }) => depth > 2)

import BookIcon from '../components/icons/Book.astro'
import ToC from '../components/ToC/index.astro'
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content="Alexandre CADIOT, senior front-end developer" />
    <title>{title}</title>
  </head>
  <body class="xl:p-4">
    <main class="prose p-4 xl:p-0 mb-10 [grid-area:main]">
      <slot />
    </main>
    <div class="prose toc [grid-area:right] hidden xl:block">
      <div
        class="sticky xl:top-4 px-2 py-4 rounded-2xl border border-zinc-100 p-6 dark:border-zinc-700/40 shadow-lg"
      >
        <div class="border border-purple-200 px-2 py-1 inline-block rounded-md">
          <BookIcon
            ><span class="text-lg font-semibold">table of contents</span>
          </BookIcon>
        </div>
        <ToC headings={filteredHeadings} />
      </div>
    </div>
    <div
      data-status="closed"
      id="stickyBottom"
      class="[grid-area:bottom] sticky bottom-0 xl:hidden"
    >
      <div
        id="bottomToc"
        class="prose flex flex-col justify-start w-full max-h-[80vh] overflow-y-auto max-w-none bg-slate-100"
      >
        <ToC headings={filteredHeadings} />
      </div>
      <button
        class="flex flex-col w-full justify-center items-center text-sm py-2 bg-slate-200 relative"
      >
        <BookIcon />
        <span id="bottomText">see table of contents</span>
      </button>
    </div>
  </body>
</html>

<script>
  const stickyBottomElm = document.getElementById('stickyBottom') as HTMLDivElement | null
  const bottomTocElm = document.getElementById('bottomToc') as HTMLDivElement | null
  const bottomTextElm = document.getElementById('bottomText') as HTMLDivElement | null

  function handleStickyBottomClick() {
    if (!stickyBottomElm || !bottomTocElm || !bottomTextElm) return

    const newDatasetValue =
      stickyBottomElm.dataset.status === 'closed' ? 'open' : 'closed'
    stickyBottomElm.dataset.status = newDatasetValue

    bottomTocElm.classList.toggle('fadeInUp')
    bottomTextElm.textContent =
      newDatasetValue === 'open' ? 'close table of contents' : 'see table of contents'
  }

  if (stickyBottomElm) {
    stickyBottomElm.addEventListener('click', handleStickyBottomClick)
  }
</script>

<style is:global>
  [id] {
    scroll-margin-top: 1.5rem;
  }
</style>

<style>
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translate3d(0, 50%, 0);
    }

    to {
      opacity: 1;
      transform: translate3d(0, 0, 0);
    }
  }

  .fadeInUp {
    animation: fadeInUp 0.25s ease-out forwards;
  }

  html {
    scroll-behavior: smooth;
  }

  body {
    display: grid;
    grid-template-areas:
      'left main right'
      'bottom bottom bottom';

    grid-template-columns: minmax(0px, 1fr) minmax(auto, 768px) minmax(0px, 1fr);
  }

  #stickyBottom[data-status='closed'] #bottomToc {
    display: none;
  }
</style>
